/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.draperlabs.userale.structs;  
@SuppressWarnings("all")
public class Message extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"org.draperlabs.userale.structs\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AA==\"},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"client\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"component\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"]},\"default\":{}},{\"name\":\"sessionID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"implLanguage\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"apiVersion\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    TIMESTAMP(1, "timestamp"),
    CLIENT(2, "client"),
    COMPONENT(3, "component"),
    SESSION_ID(4, "sessionID"),
    IMPL_LANGUAGE(5, "implLanguage"),
    API_VERSION(6, "apiVersion"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "timestamp",
  "client",
  "component",
  "sessionID",
  "implLanguage",
  "apiVersion",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[1]);
  private java.lang.CharSequence timestamp;
  private java.lang.CharSequence client;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> component;
  private java.lang.CharSequence sessionID;
  private java.lang.CharSequence implLanguage;
  private java.lang.CharSequence apiVersion;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return timestamp;
    case 2: return client;
    case 3: return component;
    case 4: return sessionID;
    case 5: return implLanguage;
    case 6: return apiVersion;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: timestamp = (java.lang.CharSequence)(value); break;
    case 2: client = (java.lang.CharSequence)(value); break;
    case 3: component = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 4: sessionID = (java.lang.CharSequence)(value); break;
    case 5: implLanguage = (java.lang.CharSequence)(value); break;
    case 6: apiVersion = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'timestamp' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTimestampDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'client' field.
   */
  public java.lang.CharSequence getClient() {
    return client;
  }

  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(java.lang.CharSequence value) {
    this.client = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'client' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isClientDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'component' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getComponent() {
    return component;
  }

  /**
   * Sets the value of the 'component' field.
   * @param value the value to set.
   */
  public void setComponent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.component = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'component' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isComponentDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'sessionID' field.
   */
  public java.lang.CharSequence getSessionID() {
    return sessionID;
  }

  /**
   * Sets the value of the 'sessionID' field.
   * @param value the value to set.
   */
  public void setSessionID(java.lang.CharSequence value) {
    this.sessionID = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'sessionID' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSessionIDDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'implLanguage' field.
   */
  public java.lang.CharSequence getImplLanguage() {
    return implLanguage;
  }

  /**
   * Sets the value of the 'implLanguage' field.
   * @param value the value to set.
   */
  public void setImplLanguage(java.lang.CharSequence value) {
    this.implLanguage = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'implLanguage' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isImplLanguageDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'apiVersion' field.
   */
  public java.lang.CharSequence getApiVersion() {
    return apiVersion;
  }

  /**
   * Sets the value of the 'apiVersion' field.
   * @param value the value to set.
   */
  public void setApiVersion(java.lang.CharSequence value) {
    this.apiVersion = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'apiVersion' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isApiVersionDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /** Creates a new Message RecordBuilder */
  public static org.draperlabs.userale.structs.Message.Builder newBuilder() {
    return new org.draperlabs.userale.structs.Message.Builder();
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Builder */
  public static org.draperlabs.userale.structs.Message.Builder newBuilder(org.draperlabs.userale.structs.Message.Builder other) {
    return new org.draperlabs.userale.structs.Message.Builder(other);
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Message instance */
  public static org.draperlabs.userale.structs.Message.Builder newBuilder(org.draperlabs.userale.structs.Message other) {
    return new org.draperlabs.userale.structs.Message.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private java.nio.ByteBuffer __g__dirty;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence client;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> component;
    private java.lang.CharSequence sessionID;
    private java.lang.CharSequence implLanguage;
    private java.lang.CharSequence apiVersion;

    /** Creates a new Builder */
    private Builder() {
      super(org.draperlabs.userale.structs.Message.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.draperlabs.userale.structs.Message.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Message instance */
    private Builder(org.draperlabs.userale.structs.Message other) {
            super(org.draperlabs.userale.structs.Message.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client)) {
        this.client = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.client);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.component)) {
        this.component = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[3].schema(), other.component);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionID)) {
        this.sessionID = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.sessionID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.implLanguage)) {
        this.implLanguage = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.implLanguage);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.apiVersion)) {
        this.apiVersion = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.apiVersion);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public org.draperlabs.userale.structs.Message.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public org.draperlabs.userale.structs.Message.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'client' field */
    public java.lang.CharSequence getClient() {
      return client;
    }
    
    /** Sets the value of the 'client' field */
    public org.draperlabs.userale.structs.Message.Builder setClient(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.client = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'client' field has been set */
    public boolean hasClient() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'client' field */
    public org.draperlabs.userale.structs.Message.Builder clearClient() {
      client = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'component' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getComponent() {
      return component;
    }
    
    /** Sets the value of the 'component' field */
    public org.draperlabs.userale.structs.Message.Builder setComponent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.component = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'component' field has been set */
    public boolean hasComponent() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'component' field */
    public org.draperlabs.userale.structs.Message.Builder clearComponent() {
      component = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'sessionID' field */
    public java.lang.CharSequence getSessionID() {
      return sessionID;
    }
    
    /** Sets the value of the 'sessionID' field */
    public org.draperlabs.userale.structs.Message.Builder setSessionID(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.sessionID = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sessionID' field has been set */
    public boolean hasSessionID() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sessionID' field */
    public org.draperlabs.userale.structs.Message.Builder clearSessionID() {
      sessionID = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'implLanguage' field */
    public java.lang.CharSequence getImplLanguage() {
      return implLanguage;
    }
    
    /** Sets the value of the 'implLanguage' field */
    public org.draperlabs.userale.structs.Message.Builder setImplLanguage(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.implLanguage = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'implLanguage' field has been set */
    public boolean hasImplLanguage() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'implLanguage' field */
    public org.draperlabs.userale.structs.Message.Builder clearImplLanguage() {
      implLanguage = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'apiVersion' field */
    public java.lang.CharSequence getApiVersion() {
      return apiVersion;
    }
    
    /** Sets the value of the 'apiVersion' field */
    public org.draperlabs.userale.structs.Message.Builder setApiVersion(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.apiVersion = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'apiVersion' field has been set */
    public boolean hasApiVersion() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'apiVersion' field */
    public org.draperlabs.userale.structs.Message.Builder clearApiVersion() {
      apiVersion = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[1]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.client = fieldSetFlags()[2] ? this.client : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.component = fieldSetFlags()[3] ? this.component : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[3]));
        record.sessionID = fieldSetFlags()[4] ? this.sessionID : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.implLanguage = fieldSetFlags()[5] ? this.implLanguage : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.apiVersion = fieldSetFlags()[6] ? this.apiVersion : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Message.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Message newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Message implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'timestamp' field.
		   */
	  public java.lang.CharSequence getTimestamp() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'timestamp' field.
		   * @param value the value to set.
	   */
	  public void setTimestamp(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'timestamp' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTimestampDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'client' field.
		   */
	  public java.lang.CharSequence getClient() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'client' field.
		   * @param value the value to set.
	   */
	  public void setClient(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'client' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isClientDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'component' field.
		   */
	  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getComponent() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'component' field.
		   * @param value the value to set.
	   */
	  public void setComponent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'component' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isComponentDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'sessionID' field.
		   */
	  public java.lang.CharSequence getSessionID() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'sessionID' field.
		   * @param value the value to set.
	   */
	  public void setSessionID(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'sessionID' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSessionIDDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'implLanguage' field.
		   */
	  public java.lang.CharSequence getImplLanguage() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'implLanguage' field.
		   * @param value the value to set.
	   */
	  public void setImplLanguage(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'implLanguage' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isImplLanguageDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'apiVersion' field.
		   */
	  public java.lang.CharSequence getApiVersion() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'apiVersion' field.
		   * @param value the value to set.
	   */
	  public void setApiVersion(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'apiVersion' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isApiVersionDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

